import { Matrix, matrixToString, Vector2D } from "./geometry";
import { World } from "./world";
import { Phase } from "./phase";
import { Actor } from "./actor";
import { createPhase } from "./phase";

function initWorld(): World {
	throw Error();
}

function initPhases(): Array<Phase> {
	throw Error();
}

function computeNewWorld(w: World, phases: Array<("move")>): World {
	throw Error();
}

function initActors(): Actor[] {
	throw Error();
}

function main() {

	//Playground. For example, this line below has all the correct types because Phase is autogenerated!
	const world = initWorld();
	const actors = initActors();
	initPhases().reduce((prev, cur) => {
		const results = prev.map((a) => a.actions[cur.funcName](world, a));
		// @ts-expect-error some typescript bug I think ?
		const newActors = cur.executePhase(results);
		return newActors;
	}, actors);

	// let world = initWorld();
	// let phases = initPhases();
	// let actors = initActors();
	// let finished = false;
	// while (!finished) {
	// 	[world, actors] = phases.reduce(([aWorld, actors], aPhase) => {
	// 		funcName: string = aPhase.funcName;
	// 		proposals = actors.map((anActor) =>
	// 			anActor.funcName(anActor, aWorld));
	// 		[aNewWorld, newActors] = resolveProposals(aWorld, actors, proposals);
	// 		return [aNewWorld, newActors];
	// 	},
	// 		[world, actors])
	// }
}

main();